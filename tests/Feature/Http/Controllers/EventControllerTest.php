<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\EventController
 */
class EventControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function approve_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Event::factory()->create();

        $response = $this->post(route('event.approve', [$event]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function approve_all_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $country = \App\Country::factory()->create();

        $response = $this->get(route('event.approveAll', [$country]));

        $response->assertRedirect('pending/'.$country);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $countries = \App\Country::factory()->times(3)->create();
        $themes = \App\Theme::factory()->times(3)->create();

        $response = $this->get(route('create_event'));

        $response->assertOk();
        $response->assertViewIs('event.add');
        $response->assertViewHas(['countries', 'themes', 'languages', 'location', 'leading_teachers']);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Event::factory()->create();

        $response = $this->get(route('delete_event', [$event]));

        $response->assertRedirect(route('my_events'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Event::factory()->create();
        $countries = \App\Country::factory()->times(3)->create();

        $response = $this->get(route('edit_event', [$event]));

        $response->assertOk();
        $response->assertViewIs('event.edit');
        $response->assertViewHas(['event', 'tags', 'selected_themes', 'selected_audiences', 'countries', 'selected_country', 'languages', 'selected_language', 'leading_teachers']);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function my_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $events = \App\Event::factory()->times(3)->create();

        $response = $this->get(route('my_events'));

        $response->assertOk();
        $response->assertViewIs('event.my');
        $response->assertViewHas('events', $events);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function reject_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Event::factory()->create();

        $response = $this->post(route('event.reject', [$event]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Event::factory()->create();

        $response = $this->get(route('view_event', [$event, 'slug' => $event->slug]));

        $response->assertRedirect(route('login'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\EventController::class,
            'store',
            \App\Http\Requests\EventRequest::class
        );
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post('events', [
            // TODO: send request data
        ]);

        $response->assertOk();
        $response->assertViewIs('event.thankyou');
        $response->assertViewHas('event');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\EventController::class,
            'update',
            \App\Http\Requests\EventRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Event::factory()->create();

        $response = $this->patch('events/{event}', [
            // TODO: send request data
        ]);

        $response->assertOk();
        $response->assertViewIs('event.show');
        $response->assertViewHas('event', $event);

        // TODO: perform additional assertions
    }

    // test cases...
}
