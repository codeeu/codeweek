<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\BadgesController
 */
class BadgesControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function leaderboard_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $users = \App\User::factory()->times(3)->create();

        $response = $this->get(route('badges-leaderboard-year'));

        $response->assertOk();
        $response->assertViewIs('badges.leaderboard');
        $response->assertViewHas('years');
        $response->assertViewHas('users', $users);
        $response->assertViewHas('rank');
        $response->assertViewHas('year');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function my_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('my-badges'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function user_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\User::factory()->create();

        $response = $this->get(route('badges-user', [$user]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function user_aborts_with_a_403(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\User::factory()->create();

        // TODO: perform additional setup to trigger `abort(403)`...

        $response = $this->get(route('badges-user', [$user]));

        $response->assertForbidden();
    }

    // test cases...
}
