<?php

namespace Tests\Feature\Http\Controllers\Api;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Api\EventsController
 */
class EventsControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function closest_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Event::factory()->create();

        $response = $this->get('api/event/closest');

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function detail_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Event::factory()->create();

        $response = $this->get(route('event_list'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function eeducation_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $importers = \App\Importer::factory()->times(3)->create();

        $response = $this->get('api/event/list/eeducation');

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function event_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Event::factory()->create();

        $response = $this->getJson('api/event-detail/{event}');

        $response->assertOk();
        $response->assertJsonStructure([
            // TODO: compare expected response data
        ]);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function geobox_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $events = \App\Event::factory()->times(3)->create();

        $response = $this->getJson('api/events/geobox');

        $response->assertOk();
        $response->assertJsonStructure([
            // TODO: compare expected response data
        ]);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function germany_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $events = \App\Event::factory()->times(3)->create();

        $response = $this->getJson('api/events/germany');

        $response->assertOk();
        $response->assertJsonStructure([
            // TODO: compare expected response data
        ]);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function list_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('event_list'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}
