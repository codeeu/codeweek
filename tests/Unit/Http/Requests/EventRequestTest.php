<?php

namespace Tests\Unit\Http\Requests;

use Tests\TestCase;

/**
 * @see \App\Http\Requests\EventRequest
 */
class EventRequestTest extends TestCase
{
    /** @var \App\Http\Requests\EventRequest */
    private $subject;

    protected function setUp(): void
    {
        parent::setUp();

        $this->subject = new \App\Http\Requests\EventRequest();
    }

    /**
     * @test
     */
    public function authorize(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $actual = $this->subject->authorize();

        $this->assertTrue($actual);
    }

    /**
     * @test
     */
    public function rules(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $actual = $this->subject->rules();

        $this->assertValidationRules([
            'language' => [
                'required',
            ],
            'audience' => [
                'required',
            ],
            'theme' => [
                'required',
            ],
            'activity_type' => [
                'required',
            ],
            'title' => [
                'required',
                'min:5',
            ],
            'description' => [
                'required',
                'min:5',
            ],
            'organizer' => [
                'required',
            ],
            'location' => [
                'required_unless:activity_type,open-online,invite-online',
            ],
            'event_url' => [
                'required_if:activity_type,open-online,invite-online',
            ],
            'start_date' => [
                'required',
            ],
            'end_date' => [
                'required',
                'after:start_date',
            ],
            'country_iso' => [
                'required',
                'exists:countries,iso',
            ],
            'user_email' => [
                'required',
            ],
            'organizer_type' => [
                'required',
            ],
            'privacy' => [
                'required',
            ],
            'leading_teacher_tag' => [
                'nullable',
            ],
        ], $actual);
    }

    /**
     * @test
     */
    public function messages(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $actual = $this->subject->messages();

        $this->assertEquals([
            'title.required' => 'Please enter a title for your event.',
            'description.required' => 'Please write a short description of what the event is about.',
            'organizer.required' => 'Please enter an organizer.',
            'location.required' => 'Please enter a location.',
            'start_date.required' => 'Please enter a valid date and time (example: 2014-10-22 18:00).',
            'end_date.required' => 'Please enter a valid date and time (example: 2014-10-22 18:00).',
            'audience.required' => 'If unsure, choose Other and provide more information in the description.',
            'theme.required' => 'If unsure, choose Other and provide more information in the description.',
            'country.required' => "The event's location should be in Europe.",
            'event_url.url' => "The activity's web page address should be a valid URL.",
            'event_url.required' => "The activity's web page is required for online activities.",
            'user_email.required' => 'Please enter a valid email address.',
        ], $actual);
    }

    // test cases...
}
